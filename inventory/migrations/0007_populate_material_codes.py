# Generated by Django 5.2.6 on 2025-09-28 12:34

from django.db import migrations


def populate_material_codes(apps, schema_editor):
    """
    Populate material_code field for existing RawMaterial records
    """
    RawMaterial = apps.get_model('inventory', 'RawMaterial')
    
    for i, material in enumerate(RawMaterial.objects.filter(material_code__isnull=True), 1):
        # Create a unique material code based on material properties
        material_name_short = {
            'spring': 'SPR',
            'stain': 'SS',
            'ms': 'MS'
        }.get(material.material_name, 'UNK')
        
        type_short = {
            'coil': 'C',
            'sheet': 'S'
        }.get(material.material_type, 'U')
        
        # Create a unique code: MaterialName_Type_Grade_ID
        base_code = f"{material_name_short}_{type_short}_{material.grade}_{material.id}"
        
        # Ensure uniqueness by checking if code already exists
        counter = 1
        material_code = base_code
        while RawMaterial.objects.filter(material_code=material_code).exists():
            material_code = f"{base_code}_{counter}"
            counter += 1
        
        material.material_code = material_code
        material.save()


def reverse_populate_material_codes(apps, schema_editor):
    """
    Reverse operation - clear material_code field
    """
    RawMaterial = apps.get_model('inventory', 'RawMaterial')
    RawMaterial.objects.update(material_code=None)


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0006_rawmaterial_material_code'),
    ]

    operations = [
        migrations.RunPython(populate_material_codes, reverse_populate_material_codes),
    ]
