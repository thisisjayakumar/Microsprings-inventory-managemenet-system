"""
Django settings for microsprings_inventory_system project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from decouple import Config, RepositoryEnv
import os
import warnings
warnings.filterwarnings(
    "ignore",
    category=UserWarning,
    message="pkg_resources is deprecated as an API.*"
)

# Use PyMySQL as MySQL driver (better cloud MySQL compatibility)
import pymysql
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in BASE_DIR
DOTENV_FILE = BASE_DIR / '.env'
config = Config(RepositoryEnv(DOTENV_FILE)) if DOTENV_FILE.exists() else Config()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-q!$qa5=thav+3cn0z+syuff00pdbymg5qnfdi85%+yee=a1w7&')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    
    # Local apps - Phase 1: Core Foundation
    'authentication',        # User management and authentication
    'products',             # Product catalog, categories, specifications
    'inventory',            # Stock management, locations, transactions
    'third_party',          # Vendor and third-party management
    
    # Phase 2: Process Management
    'manufacturing',        # Orders, batches, production execution
    'processes',           # Process templates, steps, workflows
    'resources',           # Machines, scheduling, resource management
    
    # Phase 3: Advanced Features
    'quality',             # Quality checks, traceability, compliance
    'logistics',           # Packaging, dispatch, shipping
    'notifications',       # Alerts, notifications, communication
    
    # Phase 4: Analytics & Integration
    'reporting',           # Reports, analytics, business intelligence

    #DB Sync and Backup
    'microsprings_inventory_system.sync_system',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # MSP-ERP Security Middleware (order matters)
    'authentication.middleware.NetworkRestrictionMiddleware',
    'authentication.middleware.ShiftRestrictionMiddleware',
    'authentication.middleware.SessionTrackingMiddleware',
    'authentication.middleware.RoleBasedAccessMiddleware',
    'authentication.middleware.DepartmentAccessMiddleware',
    'authentication.middleware.OperatorEngagementMiddleware',
    'authentication.middleware.APIRateLimitMiddleware',
    
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'microsprings_inventory_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'microsprings_inventory_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MySQL Database Configuration
DATABASES = {
    'default': {
        'ENGINE': config('DATABASE_ENGINE', default='django.db.backends.mysql'),
        'NAME': config('DATABASE_NAME', default='microsprings_db'),
        'USER': config('DATABASE_USER', default='root'),
        'PASSWORD': config('DATABASE_PASSWORD', default=''),
        'HOST': config('DATABASE_HOST', default='localhost'),
        'PORT': config('DATABASE_PORT', default='3306', cast=int),
        'OPTIONS': {
            'init_command': config('DATABASE_OPTIONS_INIT_COMMAND', default="SET sql_mode='STRICT_TRANS_TABLES'"),
            'charset': config('DATABASE_OPTIONS_CHARSET', default='utf8mb4'),
        },
        'CONN_MAX_AGE': config('DATABASE_CONN_MAX_AGE', default=600, cast=int),  # Connection pooling
    },
    'remote': {  # Remote cloud database
        'ENGINE': config('REMOTE_DATABASE_ENGINE', default='django.db.backends.mysql'),
        'NAME': config('REMOTE_DATABASE_NAME', default='msp_erp_db'),
        'USER': config('REMOTE_DATABASE_USER', default='root'),
        'PASSWORD': config('REMOTE_DATABASE_PASSWORD', default=''),
        'HOST': config('REMOTE_DATABASE_HOST', default='localhost'),
        'PORT': config('REMOTE_DATABASE_PORT', default='3306', cast=int),
        'OPTIONS': {
            'init_command': config('REMOTE_DATABASE_OPTIONS_INIT_COMMAND', default="SET sql_mode='STRICT_TRANS_TABLES'"),
            'charset': config('REMOTE_DATABASE_OPTIONS_CHARSET', default='utf8mb4'),
        },
        'CONN_MAX_AGE': config('REMOTE_DATABASE_CONN_MAX_AGE', default=600, cast=int),  # Connection pooling
    }
}

# Database Routing
DATABASE_ROUTERS = ['microsprings_inventory_system.sync_system.routers.SyncRouter']

ENABLE_DB_SYNC = True
SYNC_BATCH_SIZE = 50
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

CORS_ALLOW_CREDENTIALS = True

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Custom User Model
AUTH_USER_MODEL = 'authentication.CustomUser'

# Caching Configuration (for production use Redis)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes default
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# MSP-ERP Specific Settings
MSP_ERP_SETTINGS = {
    # Network Security
    'ENFORCE_NETWORK_RESTRICTIONS': False,
    'DEFAULT_IP_RANGES': ['192.168.0.0/16', '10.0.0.0/8'],
    
    # Shift Management
    'ENFORCE_SHIFT_RESTRICTIONS': False,
    'SHIFT_TIMES': {
        'I': {'start': '09:00', 'end': '17:00'},
        'II': {'start': '17:00', 'end': '02:00'},
        'III': {'start': '02:00', 'end': '09:00'},
    },
    
    # Session Management
    'MAX_CONCURRENT_SESSIONS': 1,
    'SESSION_TIMEOUT_HOURS': 8,
    
    # Rate Limiting
    'API_RATE_LIMIT_PER_HOUR': 1000,
    'ENABLE_RATE_LIMITING': True,
    
    # Manufacturing
    'BATCH_ID_PREFIX': 'BATCH',
    'MO_ID_PREFIX': 'MO',
    'PACKAGE_ID_PREFIX': 'PKG',
    
    # Quality Control
    'ENABLE_TRACEABILITY': True,
    'QR_CODE_FORMAT': 'JSON',
    
    # Departments
    'DEPARTMENTS': {
        'rm_store': 'Raw Material Store',
        'coiling': 'Coiling Department',
        'tempering': 'Tempering Department',
        'plating': 'Plating Department',
        'packing': 'Packing Department',
        'fg_store': 'Finished Goods Store',
        'quality': 'Quality Control',
        'maintenance': 'Maintenance',
        'admin': 'Administration'
    }
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'msp_erp.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'authentication': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'manufacturing': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory
import os
os.makedirs(BASE_DIR / 'logs', exist_ok=True)
